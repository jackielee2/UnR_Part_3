==================================================================
1.	참새 만들기
	[ 참고	:	https://blog.naver.com/foxmann/220281654210 ]

==================================================================

--------------------------------------------------
0]	개요.
--------------------------------------------------

	-	참새 기능 정리

		-	랜덤하게 등장.
		-	화면 왼쪽에서 등장하여 오른쪽으로 수평이동.
		-	초당 2~3회로 프레임 애니메이션.
		-	추락할때는 애니메이션 하지 않음.
		-	화면을 벗어난 참새는 자동 제거.



--------------------------------------------------
1]	참새 블루프린트 생성.
--------------------------------------------------

	--------------
	-	개요.
	--------------

		-	참새의 기능을 정의할 블루프린트 생성.


	--------------
	-	실습.
	--------------

		-----------------------
		1)	액터 블루 프린트 생성.
		-----------------------

			-	[ 콘텐츠 폴더 ]			>	[ Blueprints 폴더 ]		>	우클릭 >
				[ 팝업 ]					>	[ 기본 에셋생성 그룹 ]	>	[ 블루프린트 클래스 ] >
				[ 일반 클래스 그룹 ]		>	[ 액터 ] 선택			>	[ B_Bird ] 생성.



		-----------------------
		2)	컬리전 추가.
		-----------------------

			-	[ 컴포넌트 ] > [ Sphere Collision ] 추가.
			-	[ 루트 노드 ]로 설정..
				-	[ 이름 ]					:	[ Trigger ]
					[ 셰이프 ] > [ Radius ]	:	[ 32 ( 기본값 ) ]

					

		-----------------------
		3)	Static Mesh 추가.
		-----------------------

			-	[ 컴포넌트 ] > [ Static Mesh ] 추가.
				-	[ 이름 ]											:	[ Bird ]
					[ 디테일 ] > [ Static Mesh ] > [ Static Mesh ]	:	[ Quad ]
							  > [ 머터리얼 ] > [ 엘리먼트 0 ] 		:	[ M_Bird ]
							  > [ 트랜스폼 ] > [ 스케일 ]				:	[ 0.8, 1, 0.8 ]
					

			
		-----------------------
		4)	변수 추가.
		-----------------------

			-	참고 : [ B_Bird 변수 추가.png ]
		


		-----------------------
		5)	변수 초기화.
		-----------------------

			----------
			-	개요.
			----------

				-	이동속도와 애니메이션 속도를 랜덤처리.


			----------
			-	실습.
			----------

				1)	[ B_Bird ] > [ Init Bird 함수 노드 ] 생성.

				-	이하 [ B_Bird ] > [ Init Bird ] 참고..



		-----------------------
		6)	참새의 다이나믹 머터리얼 인스턴스 만들기.
		-----------------------

			------------
			-	개요.
			------------

				-	참새를 애니메이션 하기위해
					머터리얼의 속성을 수정해야하므로( 텍스처를 변경. )
					다이나믹 머터리얼 인스턴스 필요.

				-	컨스트럭션 스크립트에서 처리


			
			------------
			-	실습.
			------------

				1)	[ 컨스트럭션 스크립트 ] 열기.

				-	이하 [ 컨스트럭션 스크립트 ] 참고..
					

		-----------------------
		7)	화면의 폭과 높이 구하기.
		-----------------------

			------------
			-	개요.
			------------

				-	참새가 화면을 벗어낫는지 판정하기 위해
					화면의 크기를 먼저 알아야 함.

					-	참새의 경계영역 설정..

			------------
			-	실습.
			------------

				1]	[ B_Bird ] > [ Get Screen Size 함수 노드 ] 생성.

				-	이하 [ B_Bird ] > [ Get Screen Size ] 참고..




		-----------------------
		8)	참새의 Screen 좌표 구하기
		-----------------------
			------------
			-	개요.
			------------

				-	참새의 World 좌표를 Screen 좌표로 변환.


			------------
			-	실습.
			------------

				1]	[ B_Bird ] > [ Get Screen Pos 함수 노드 ] 생성.

				-	이하 [ B_Bird ] > [ Get Screen Pos ] 참고..




		-----------------------
		9)	화면을 벗어난 참새 제거하기.
		-----------------------

			------------
			-	개요.
			------------

				-	참새는 화면의 왼쪽에서 오른쪽으로 이동.
					올빼미와 충돌하면 수직으로 추락.

				-	화면의 오른쪽이나 아래를 벗어나면 참새 제거.


			------------
			-	실습.
			------------

				1]	[ B_Bird ] > [ Check Destroy 함수 노드 ] 생성.

				-	이하 [ B_Bird ] > [ Check Destroy ] 참고..

				

		-----------------------
		10 - 1)	참새 애니메이션 하기.
		-----------------------

			------------
			-	개요.
			------------

				1)	애니메이션의 인덱스를 이용하여 다음 애니메이션에 사용할 이미지를 선택.
				2)	애니메이션 지연시간을 이용하여 이미지 교체 시간을 설정.


			------------
			-	실습
			------------

				1]	[ B_Bird ] > [ Set Anim Index 함수 노드 ] 생성.

				2]	[ 변수 ] > [ Anim Index ( float 타입 )] 추가

				-	이하 [ B_Bird ] > [ Set Anim Index ] 참고..














		-----------------------
		10 - 2)	참새 애니메이션 시간 설정.
		-----------------------

			------------
			-	개요
			------------

				-	일정 시간이 경과될 때마다 참애 애니메이션 이미지를 갱신.

					1)	[ Anim Delay ]에 설정된 시간 값을 매프레임마다 프레임 간격시간 만큼 감소.
					2)	[ Anim Delay ]이 0 이하가 되면 [ Anim Delay ]에 설정된 시간이 흘렀다는 의미.
						-	이후에도 시간경과를 체크해야하므로 [ Anim Delay ] 값을 초기화.
						-	[ Set Anim Index 함수 노드 ]를 호출하므로써 애니메이션 갱신.
						-	참새가 추락하지 않는 경우에만 애니메이션을 갱신해야하므로 
							[ Is Dead 변수 노드 ]를 이용하여 참새 추락 여부 확인.



			------------
			-	실습
			------------

				1]	[ B_Bird ] > [ Anim Bird 함수 노드 ] 생성.

				2]	[ 변수 ] > [ Is Dead 변수 노드 ] 추가.

				3]	참새의 추락 여부 확인
					1)	[ Is Dead ( Get ) 노드 ] 추가.
					2)	[ 분기 노드 ] 추가.
					3)	[ Anim Bird 노드 ] > [ 출력 제어 핀 ]		--------------->	[ 분기 노드 ] > [ 입력 제어 핀 ]
						[ Is Dead ( Get ) 노드 ] > [ 출력 핀 ]	--------------->	[ 분기 노드 ] > [ Condition 핀 ]

				4]	참새가 추락 하지 않은 경우에만 애니메이션 시간을 갱신.
					1)	[ Anim Delay ( Get ) 노드 ] 추가.
					2)	[ Get World Delta Seconds 노드 ] 추가.
					3)	1) - 2)
						-	[ float - float 노드 ] 추가 후 연결.
					4)	[ Anim Delay ( Set ) 노드 ] 추가.
					5)	3) > [ float - float 노드 ] > [ 출력 핀 ]	-------------->	[ Anim Delay ( Set ) 노드 ] > [ Anim Delay 핀 ]
					6)	3] > [ 분기 노드 ] > [ False 출력 핀 ]		-------------->	[ Anim Delay ( Set ) 노드 ] > [ 입력 제어 핀 ]
					
				5]	갱신된 애니메이션 시간이 0보다 작은지 체크.
					1)	[ float < float 노드 ] 추가.
					2)	4] > [ Anim Delay ( Set ) 노드 ] > [ 출력 핀 ]	------------>	[ float < float 노드 ] > [ 입력 핀 1]
						[ float < float 노드 ] > [ 입력 핀 2]	:	0

				6]	5]의 결과가 True 인 경우 애니메이션 갱신 시간을 초기화하고 애니메이션 인덱스를 갱신.
					1)	[ 분기 노드 ] 추가.
					2)	5] > [ float < flat 노드 ] > [ 출력 핀 ]	---------------->	[ 분기 노드 ] > [ Condition 핀 ]
					3)	애니메이션 갱신시간 = 초당 애니메이션 갱신횟수
						-	Anim Delay = 1 / Anim Per Sec 으로 초기화.
						-	1 / [ Anim Per Sec ( Get ) 노드 ]
							-	[ float / float 노드 ] 추가
							-	[ float / float 노드 ] > [ 입력 핀 1 ]	:	1
								[ Anim Per Sec ( Get ) 노드 ] > [ 출력 핀 ]	------------->	[ float / float 노드 ] > [ 입력 핀 2 ]
					4)	[ Anim Delay ( Set ) 노드 ] 추가.
						-	3) > [ float / float 노드 ] > [ 출력 핀 ]		------------->	[ Anim Delay ( Set ) 노드 ] > [ Anim Delay 핀 ]
						-	[ 분기 노드 ] > [ True 핀 ]						------------->	[ Anim Delay ( Set ) 노드 ] > [ 입력 제어 핀 ]
						-	[ Anim Delay ( Set ) 노드 ] > [ 출력 제어 핀 ]	------------->	[ Set Anim Index 함수 노드 ] > [ 입력 제어 핀 ]




		-----------------------
		11)	참새 이동하기.
		-----------------------

			------------
			-	개요
			------------

				1)	현재 프레임에서 이동할 거리와 방향을 적용.
				2)	현재 좌표에 1)의 결과를 적용.


			------------
			-	실습.
			------------

				1)	[ B_Bird ] > [ MoveBird 함수 노드 ] 생성.

				2)	이하 [ MoveBird 함수 노드 ] 참고.

			-	부연 설명.
				-	월드 좌표.
					-	배경이 되는 레벨의 좌표.
					-	모든 액터들의 절대적 좌표.

				-	로컬 좌표.
					-	각 액터의 기준 좌표.
					-	각 액터별 상대 좌표.

				-	앞방향 (0, 1, 0)으로 이동처리를 적용할때
					액터가 임의의 방향으로 회전한 상태인 경우,
					이동 결과가 다름.
					( 참고 : 로컬좌표 vs 월드좌표.PNG )



						
		-----------------------
		12)	참새 추락.
		-----------------------

			------------
			-	개요.
			------------

				-	올빼미가 참새와 충돌하면 감점되고,
					참새가 추락되도록 처리.


			------------
			-	실습.
			------------

				1)	[ B_Bird ] > [ Drop Bird 함수 노드 ] 생성.

				2)	이하 [ Drop Bird 함수 노드 ] 참고.




		-----------------------
		13)	Begin Play 이벤트.
		-----------------------

			------------
			-	개요.
			------------

				-	게임 시작시 화면의 크기 구하기.


			------------
			-	실습.
			------------

				1)	[ B_Bird ] > [ Begin Play 이벤트 ]
					----->	[ Get Screen Size 함수 노드 ]




		-----------------------
		14)	게임 루프( Tick 이벤트 )
		-----------------------
		
			------------
			-	실습.
			------------

				1)	이하 [ B_Bird ] > [ Tick 이벤트 ] 참고.
		


		-----------------------
		15)	참새 충돌 판정과 처리.
		-----------------------

			------------
			-	개요.
			------------

				-	충돌이벤트는 충돌체나 피충돌체 모두에 이벤트가 발생.

				-	일반적으로 피충돌체 측에서 관련 처리를 하는것이
					구조가 간단해짐.

					[ 충돌체	]		:	올빼미
									:	일반적으로 플레이어가 컨트롤하는 액터.

					[ 피충돌체 ]		:	참새.
										프로그래밍에 의해 수동적으로 이동하는 액터.

				-	참새의 충돌대상은 올빼미, 나뭇가지, 선물등이 될수 있으므로
					올빼미와의 충돌만 유효하도록 처리.

				-	[ B_Bird ] > [ Trigger ]의 콜리전 프리셋이 [ OverlapAllDynamic ]이므로
					충돌 이벤트는 [ Actor Begin Overlap ]을 사용.



			------------
			-	실습.
			------------

				1)	이하 [ B_Bird ] > [ Actor Begin Overlap 이벤트 ] 참고.


		-----------------------
		16)	테스트.
		-----------------------

			------------
			-	실습.
			------------

				1)	[ B_Bird ]를 화면 상단 밖으로 
					여러개를 좌상단에 일렬로 설치한 뒤 실행.

				2)	체크 사항.
					-	참새가 오른쪽으로 이동하는가?
					-	애니메이션은 작동하는가?
					-	참새의 이동속도와 애니메이션 속도가 랜덤하게 처리되는가?
					-	올빼미와 충돌하면 추락하는가?
					-	화면을 벗어난 참새는 제거되는가?
				
				3)	테스트 완료후 참새들 삭제.




==================================================================//