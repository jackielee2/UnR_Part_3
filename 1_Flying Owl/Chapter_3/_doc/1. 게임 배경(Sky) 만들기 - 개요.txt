==================================================================
1. 게임 배경(Sky) 만들기 - 개요
	[ 참고	:	https://blog.naver.com/foxmann/220265656202
				https://kwaksh2319.tistory.com/215
				https://blog.naver.com/kfhs44/221470226500
				https://m.blog.naver.com/foxmann/220266486716 ]
==================================================================
--------------------------------------------------
1]	새 레벨 만들기.
--------------------------------------------------

	--------------
	-	개요
	--------------

		-	레벨( 또는 맵 )
			-	게임 플레이를 위해 제작하는 게임의 무대.
			-	확장자는 [ *.umap ]



	--------------
	-	레벨 생성.
	--------------

		1)	[ Levels ] 폴더 생성.
			-	레벨을 관리하기위한 폴더 생성.

		2)	[ 메뉴 ] > [ 파일 ] > [ 그룹 : 로드와 저장 ] >
			[ 새레벨 ] > [ 빈레벨 ] 선택 및 저장.
			-	[ 이름 ]		:	[ "Main" ]

		3)	[ 디폴트 레벨 ] 설정.
			-	종류
				-	[ 에디터 시작 맵 ]
					-	에디터 시작시 로딩되는 맵.

				-	[ 게임 기본 맵 ]
					-	게임 진행시 시작 맵.

			-	설정
				-	[ 메뉴 ] > [ 편집 ] > [ 그룹 : 환경설정 ] > 
					[ 프로젝트 세팅 ] > [ 프로젝트 ] > [ 맵 & 모드 ] >
					[ Default Maps ] > [ 에디터 시작 맵 / 게임 기본 맵 ]	:	[ Main 맵 ] 
						
--------------------------------------------------
2]	게임 배경( Sky ) 만들기.
--------------------------------------------------

	--------------
	-	개요.
	--------------

		-	[ 블루 프린트 ]
			-	언리얼에서 제공하는 비주얼 스크립팅 방식.
			-	목적
				-	액터( 게임 오브젝트 )에 소스 코드를 연결하는 과정의 편리.
				-	쉬운 코딩을 위한 목적이 아님.
					-	사전에 프로그래밍 언어에 대한 최소한의 기본 문법 이해 필요.

			-------------------
			-	장단점
			-------------------

				-	장점
					-	순서도처럼 노드를 연결하여 프로그램의 논리를 표현.
						->	전체적인 흐름을 이해하기 쉬움.

				-	단점
					-	논리가 복잡해지면 그래프가 방대해짐.
						->	가독성 저하.



			-------------------
			-	작성 규칙.
			-------------------

				(  참고 : 블루프린트 샘플.jpg )

				-	기본 단위는 노드.
				
				-	노드와 노드사이는 [ 제어( 명령 ) ]와 [ 데이터 ]가 전송됨.
					제어( 명령 )와 데이터의 흐름은 선으로 연결..
				
				-	[ |> ]	:	제어 핀
					[ * ]	:	데이터 핀.
				
				-	제어와 데이터의 흐름선은 왼쪽 -> 오른쪽으로 진행.

				-	흐름선의 색깔
					-	제어		:	흰색.
						데이터	:	자료형의 색.

				-	핀의 위치..
					-	[ 입력핀 ]	:	[ 노드 왼쪽 ]
						[ 출력핀 ]	:	[ 노드 오른쪽 ]

			-------------------
			-	노드의 종류
			-------------------

				-----------
				1)	[ 이벤트 노드 ]
				-----------

					( 참고 : 이벤트 노드.jpg )
					-	프로그램내에서 미리 규정한 특정한 사건이 발생했음을 알리는 신호.
					-	빨간색 노드로 표시.



				-----------
				2)	[ 변수 노드 ]
				-----------

					( 참고 : 변수 노드 유형.jpg )
					-	데이터를 전달 받는 통로 역할.
					-	종류

						Type		|	값의 범위					|	기타
						=================================================================================
						bool		|	true / false				|
						---------------------------------------------------------------------------------
						byte		|	0 ~ 255						|
						---------------------------------------------------------------------------------
						int			|	약 +-21억 이내의 정수			|	-214,7483,648 ~ 214,7483,647
						---------------------------------------------------------------------------------
						float		|	정밀도 7자리 이내의 실수		|	-3.4×10-38 ~ 3.4×1038
						---------------------------------------------------------------------------------
						name		|	액터의 이름					|
						---------------------------------------------------------------------------------
						string		|	문자열						|	영숫자, 한글, 특수문자로 된 문자열
						---------------------------------------------------------------------------------
						text		|	문자열						|	현지화 가능한 텍스트.
						---------------------------------------------------------------------------------
						Vector		|	(x, y, z) 또는 RGB			|	3개의 실수( float )로 구성된 자료.
						---------------------------------------------------------------------------------
						Rotator		|	3D 공간상의 회전값			|	Yaw, Pitch, Roll
						---------------------------------------------------------------------------------
						Transform	|	위치, 회전, 스케일정보.		|
						---------------------------------------------------------------------------------
						struct		|	구조체						|
						---------------------------------------------------------------------------------
						object		|	액터의 오브젝트				|
						---------------------------------------------------------------------------------
						interface	|	인터페이스 포인터				|
						---------------------------------------------------------------------------------
						class		|	클래스 포인터					|
						---------------------------------------------------------------------------------
						Enum		|	열거형						|	순차적인 값을 갖는 자료.
						---------------------------------------------------------------------------------//



				-----------
				3)	[ 연산자 노드 ]
				-----------

					( 참고 : 연산자 노드.jpg )
					-	둘 이상의 입력으로부터 일정한 규칙에 따라 계산하는 노드.
					-	피연산자를 전달받는 [ 입력 핀 ]과 연산결과를 반환하는 [ 출력 핀 ]으로 구성.
					-	자료 유형에 따라 사용하는 연산자가 다름.
					-	자료 유형은 핀의 색으로 구분.
					-	연산자 우선순위 적용되지 않음.
						-	무조건 왼쪽에서 오른쪽으로 진행.
						-	예)	5 + 3 % 2
								( 참고 : 덧셈 나눗셈 연산자 노드 예시 )
								->	수학		->	5 + ( 3 % 2 )
								->	블푸프린트	->	( 5 + 3 ) % 2


				-----------
				4)	[ 함수 노드 ]
				-----------

					( 참고 : 함수 노드.jpg )
					-	하나 이상의 데이터를 입력받아 정해진 절차를 수행한 후 
						하나 이상의 결과를 반환하는 노드.
						-	하나 이상의 입력핀과 출력핀 존재.
					-	다양한 내장 함수가 있으며 개발자가 직접 만들 수 있음.
					


				-----------
				5)	[ 제어 노드 ]
					( 참고 : 제어 노드.jpg )
				-----------

					-	[ Branch( if ) ]	:	조건에 따른 분기.
						[ for ]				:	반복 처리
						[ switch ]			:	특정 값에 따른 선택
						
						등 제어의 흐름을 바꾸는 노드.


				-----------
				6)	[ 시간 관련 노드 ]
					( 참고 : 시간 관련 노드.jpg )
				-----------
					-	시간의 흐름에 따라 특정한 처리를 진행하는 노드.



				-----------
				7)	[ 형변환 노드 ]
					( 참고 : 형변환 노드.jpg )
				-----------

					-	자료의 형(Type)을 강제로 바꾸기 위한 노드.
					-	대부분 자동으로 추가됨.
						-	작은 데이터 타입이 큰 데이터 타입으로 변환되는 경우에만 가능.


				-----------
				8)	변수의 [ Get & Set ]
					( 참고 : Get & Set 노드.jpg )
				-----------

					-	[ Get ]
						-	변수의 값을 읽어오는 노드.
						-	값을 처리.

						[ Set ]
						-	변수에 값을 설정하는 노드.
						-	제어처리
							-	왼쪽의 [ |> ] 핀에
								명령( 또는 이벤트 )를 연결하지 않으면
								작동하지 않음.

			-------------------
			-	블루 프린트의 종류.
			-------------------

				1)	[ 레벨 블루프린트 ]
					-	게임의 모든 [ 레벨(씬) ]에 하나씩 할당되어 있는 블루프린트.
					-	레벨에 설치된 각종 액터와 상호 작용을 통해 게임을 진행.
					-	레벨의 [ 메인 프로그램 ]에 해당.
					-	레벨 블루프린트는 다른 레벨의 내용은 참조 불가.

				2)	[ 게임 모드 블루프린트 ]
					-	게임의 모드와 설정 등을 위해 사용.
					-	게임 모드 블루프린트를 만들지 않으면
						언리얼 엔진에 내장되어 있는 GameMode 블루프린트가 사용됨.

				3)	[ 클래스 블루프린트 ]
					-	레벨에 설치할 각종 액터, 사운드, 카메라, 파티클 등에서 발생하는 이벤트와
						움직이는 액터의 동작 등을 처리하기 위해 사용.
					-	클래스 블루프린트는 액터에 하나씩 할당 가능.
					-	블루프린트가 할당된 액터를 [ 블루프린트 액터 ]라고 하며,
						블루프린트 액터를 레벨에 설치하면 블루프린트에 설정한 절차대로 동작.
						예)	사람이 접근하면 자동으로 켜지는 전등, 스위치를 누르면 작동하는 엘리베이터 등
					-	게임 제작에 필요한 블루프린트의 거의 대부분.

				4)	[ 블루프린트 인터페이스 ]
					-	다른 블루프린트와 데이터를 공유, 이벤트를 발생하기 위해 작성한 블루프린트.
					-	함수 이름만 모아둔 것.

				5)	[ 블루프린트 매크로 라이브러리 ]
					-	*블루프린트 매크로를 모아둔 것.
						-	*블루프린트 매크로 
							-	반복되는 일련의 절차를 별도의 그래프로 만들어 둔 것.
					-	매크로 라이브러리에 수록된 매크로는 각각의 블루프린트에 추가가능.

				6)	[ 위젯 블루프린트 ]
					-	게임의 UI를 만들기 위한 블루프린트.


					
==================================================================//