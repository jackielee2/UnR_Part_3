==================================================================
1. AI를 이용한 술래잡기( 구현 ).
	[ 참고 : 초보자를 위한 언리얼 엔진 4 ]

	-	위 책의 내용을 바탕으로 게임을 만들면서 언리얼을 익힙니다.
==================================================================

-----------------------------------
0]	개요.
-----------------------------------

	-	AIController 클래스의 블루프린트를 이용하여 AI를 구현한다.



-----------------------------------
1]	블루프린트 추가.
-----------------------------------

	-	[ 콘텐츠 창 ] > [ Blueprints 폴더 ] > [ 마우스 우클릭 ] >
		[ 팝업 ] > [ 기본 애셋 생성 ] > [ 블루프린트 클래스 ] >
		[ 모든 클래스 ] > [ AIController ] 검색 및 추가.
		-	이름		:	[ BP_AIController ]



-----------------------------------
2]	AI로 움직이는 액터에 블루프린트 설정.
-----------------------------------

	-	개요.

		-	[ BP_AICharacter ]는 플레이어가 조작하는 것이 아니라 
			AI가 움직이는 액터.
		-	액터를 AI로 움직이게 하려면 액터의 [ AI Controller Class ] 속성에
			AIController 클래스의 블루프린트를 설정.



	-	실습.

		1)	[ 콘텐츠 창 ] > [ AI ] > [ BP_AICharacter ] 열기.

		2)	[ 컴포넌트 ] > [ BP_AICharacter ] 선택.

		3)	[ 디테일 ] > [ Pawn ] > [ AI Controller Class ]		:	[ BP_AIController ]

		4)	컴파일 및 저장.



-----------------------------------
3]	[ BP_AIController ] 작성하기.
-----------------------------------

	-	개요.
		-	지금까지 만든 비헤이비어 트리를 블루프린트에서 불러올 수 있게한다.



	-	실습.
		
		1)	[ 콘텐츠 창 ] > [ Blueprints 폴더 ] > [ BP_AIController ] > [ 이벤트 그래프 ] 열기

		2)	[ BeginPlay 이벤트 ] > [ 출력 제어 핀 ]	------------>	[ Run Behavior Tree ] > [ 입력 제어 핀 ]

			-	[ Run Behavior Tree ]
				-	지정한 비헤이비어 트리를 불러오는 노드.
				-	[ BTAsset ]		:	[ AI_BehaviorTree ]



-----------------------------------
4]	[ Pawn Sensing ] 추가.
-----------------------------------
	
	-	개요.

		-	[ Pawn Sensing ]
			-	액터에 시각, 청각 등의 감각을 부여할 수 있는 컴포넌트.
			-	예)	AI의 시야에 캐릭터가 들어오면 비헤이비어 트리에서
					정의한 행동을 처리하도록 구현.

	

	-	실습.

		1)	[ BP_AIController ] > [ 컴포넌트 창 ] > [ Pawn Sensing ] 추가 후 컴파일.

			-	컴파일을 해야 뷰포트에 액터의 시야와 소리를 들을 수 있는 범위가 표시됨.

		2)	주요 속성
			-	[ 디테일 ] > [ AI ]
				-	[ Hearing Threshold ]		:	AI가 들을 수 있는 범위.
													하늘색 경계.

				-	[ LOSHearing Threshold ]	:	들을 수 없게 되는 범위.
													노란색 경계.

				-	[ Hearing Threshold ]		:	시야 범위.
													초록색 경계.

			기타 속성.
				-	[ Sensing Interval ]		:	시/청각 정보를 갱신하는 주기.

				-	[ 듣기 최대 사운드 수명 ]		:	들을 수 있는 음성 길이.

				-	[ Enable Sensing Updates ]	:	시/청각 정보 갱신 여부.

				-	[ See Pawns ]				:	시각이 반응할지 여부
													( 별도의 블루 프린트 작성 필요. )

				-	[ Hear Noises ]				:	청각이 반응할지 여부.
													( 별도의 블루 프린트 작성 필요. )

				-	[ Peripheral Vision Angle ]	:	시야각.


			

-----------------------------------
5]	[ On See Pawn ] 노드 추가.
-----------------------------------

	-	개요.
		
		-	[ On See Pawn ]			
			-	[ Pawn Sensing ]의 시야에 액터가 들어왔을때 호출되는 이벤트.

	-	실습

		1)	[ 컴포넌트 창 ] > [ PawnSensing ] 선택.

		2)	[ 디테일 ] > [ 이벤트 ] > [ On See Pawn ] 선택.
		
		3)	[ On See Pawn ] > [ 출력 제어 핀 ]	-------------->		[ BP_Character에 형변환 ] > [ 입력 제어 핀 ]
			[ On See Pawn ] > [ Pawn 출력 핀 ]	-------------->		[ BP_Character에 형변환 ] > [ Object 입력 핀 ]

		4)	[ BP_Character에 형변환 ] > [ 출력 제어 핀 ]		-------------->		[ Set Value as Object ] > [ 입력 제어 핀 ]
			-	[ 컨텐스트에 따라 ] 체크 해제..

		5)	[ BP_Character에 형변환 ] > [ As BP Character ]	-------------->		[ Set Value as Object ] > [ Object Value ]

		6)	[ BP_AIController ]에 설정한 [ Blackboard ] 연결.

			1)	[ 마우스 우클릭 ] > [ 가능한 모든 액션 ] > [ 셀프 레퍼런스 가져오기 ] 검색 후 추가.
				-	[ 셀프 레퍼런스 가져오기 ] ( [ Self 노드 ] )
					-	자기 자신의 정보 참조.

			2)	[ Self 핀 ]		----------------->	[ Get Blackboard ] ( Variables / AI )

			3)	[ Blackboard ]	----------------->	[ Set Value as Object ] > [ 타깃 ]

		
		7)	[ Set Value as Object ]의 [ Key Name ]핀에 이름 설정.

			1)	[ Make Literal Name ] 노드 추가.

				-	[ Make Literal Name ] > [ Value 입력핀 ]		:	[ Player ]

			2)	[ Make Literal Name ] > [ Return Value 출력 핀 ]		--------------->	[ Set Value as Object ] > [ Key Name ]

		
		8)	컴파일 및 저장 후 [ BP_AICharacter ]을 뷰포트에 드래그.

		9)	테스트.

		10)	AI의 이동 속도 조절.

			1)	[ 콘텐츠 창 ] > [ AI ] > [ BP_AICharacter ] 열기.

			2)	[ 컴포넌트 창 ] > [ Character Movement ] 선택.

			3)	[ 디테일 ] > [ Character Movement : Walking ] > [ Max Walk Speed ]	:	200

==================================================================//