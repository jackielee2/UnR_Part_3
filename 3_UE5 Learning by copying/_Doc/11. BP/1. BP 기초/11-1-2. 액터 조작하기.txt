==============================================================================
11-1-2. 액터 조작하기..
==============================================================================

	-----------------
	-	프레임 표시와
		틱 이벤트..
	-----------------

		-----------------
		-	3D 화면
			렌더링 방식..
		-----------------

			-	여러 개의 정지 화면들을
				고속으로 전환하여
				부드럽게 움직이는 것처럼
				보이게 함..

				-	프레임..
					-	렌더링에 사용되는
						낱장의 정지화면 이미지..

				-	틱..
					-	프레임 전환 처리를 할 때의
						간격..

					-	실행되는 프로그램에서의 간격이나
						내부 함수가 실행되는 간격..

					-	틱 이벤트..
						-	틱이 한번 발생했을때
							호출되는 이벤트 노드..
						-	실시간 처리는
							틱 이벤트 노드를 활용..
						

		--------------
		-	틱 이벤트
			사용하기..
		--------------

			------------------------
			-	[ 틱 이벤트 노드 ]의
				구성..
			------------------------

				-	[ Delta Seconds ]

					-	틱 이벤트가 호출되는
						시간 간격..

					-	이전 틱과 현재 틱 사이의
						시간 간격..

					-	틱 이벤트가 항상 일정한
						간격으로 호출되지 않음..

						-	처리해야할 데이터가 많거나
							CPU의 성능이 좋지 않으면
							간격이 길어질 수 있음..
				


			-------------------
			-	액터 움직이기..
				참고 :	[ _BP ]
						> [ Simple_BP_2.umap ]
			-------------------

				----------
				-	적용..	
				----------

					------------------------------
					1)	[ Add Actor Local Offset ]
						추가..
					------------------------------

						-	특정 액터의
							위치 이동 처리..

						-	주요 구성..
							-	Target..
								-	조작할 대상 액터..
							-	Delta Location..
								-	이동할 거리 지정..
							-	Sweep..
								-	무언가에 충돌시
									멈출지 설정..
							-	Teleport..
								-	순간이동 설정..



					---------------------
					2)	[ Sphere ] 추가..
					---------------------

						-	조작할 Sphere 액터 추가..

						-	[ 아웃라이너 ]
							> [ Sphere ]를 BP 에디터에
							드래그 앤 드롭..


							
					----------------
					3)	노드 연결 및
						설정..
					----------------

						1)	[ 틱 이벤트 노드 ]
							> [ 실행 핀 ]

							--->

							[ Add Actor Local Offset 노드 ]
							> [ 실행 핀 ]



						2)	[ Sphere ]
							> [ 출력 핀 ]

							--->

							[ Add Actor Local Offset 노드 ]
							> [ 타깃 핀 ]


						3)	[ Add Actor Local Offset 노드 ]
							> [ Delta Location ]
								-	[ X ] : 1.0..


					------------------
					4)	실행 및 확인..
					------------------

						-	스피어 액터가 전방으로
							천천히 이동..
						


			---------------
			-	액터 이동
				개선 하기..
			---------------

				----------
				-	개요..
				----------
				
					-	틱 이벤트가 항상 일정한
						간격으로 호출되지 않음..

						-	처리해야할 데이터가 많거나
							CPU의 성능이 좋지 않으면
							간격이 길어질 수 있음..

					-	결과적으로 틱 이벤트의
						호출 빈도에 따라
						액터의 이동속도가
						달라질수 있음..

						-	성능이 다른 컴퓨터끼리
							네트워크 게임을 하게되면
							똑같이 이동 하더라도
							1초 후에 도착한 위치가 달라짐..

				----------
				-	개선..
				----------

					-	틱 1회시 이동량에
						틱 사이의 시간 간격을
						곱할 것..

					예)	똑같은 게임을 10 Fps로 처리하는
						컴퓨터( A )와 30 Fps로 처리하는
						컴퓨터( B )가 있을때..

						개선 사항 적용 전 1초후
						액터의 위치..

							A =>	10 * 0.1m = 약 1m
							B =>	30 * 0.1m = 약 3m


						개선 사항 적용 후 1초후
						액터의 위치..

							A =>	10 * 0.1m * 0.1초		= 약 0.1m
							B =>	30 * 0.1m * 0.0333..초	= 약 0.1m



				----------
				-	적용..
					참고 :	[ _BP ]
							> [ Simple_BP_3.umap ]
				----------

					1)	[ * 노드 ] 추가..


					2)	[ 틱 이벤트 노드 ]
						> [ Delta Seconds ]

						--->

						[ * 노드 ]
						> [ A 핀 ]

						-	[ * 노드 ]
							> [ B 핀 ]

								-	10..
								-	초당 속도로 바뀌므로
									이동속도가 느려짐..

					
					3)	[ Make Vector 노드 ] 추가..


					4)	[ * 노드 ]
						> [ 출력 핀 ]
						
						--->
						
						[ Make Vector 노드 ]
						> [ X ]


					5)	[ Make Vector 노드 ]
						> [ 출력 핀 ]

						--->

						[ Add Actor Local Offset 노드 ]
						> [ Delta Location ]


					
					6)	실행 및 확인..

						-	두대 이상의 서로 다른 환경의
							컴퓨터에서 작동 시키면
							동일한 시간에 도착한 위치가
							같음..

						-	성능이 좋지 않은 컴퓨터에서는
							이동이 끊겨보일 수 있음..



==============================================================================

	[ 참고 ]
			
		틱
		https://namu.wiki/w/%ED%8B%B1

==============================================================================