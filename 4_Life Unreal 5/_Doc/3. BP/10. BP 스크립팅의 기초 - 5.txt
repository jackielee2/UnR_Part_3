===============================================================
10. BP 스크립팅의 기초 - 5..
===============================================================

	------------
	-	클래스..
	------------

		-	클래스..

			-	특정한 속성과 기능들로 구성된
				추상적인 형식..

			-	속성과 기능..

				-	속성..
					-	변수들로 구성된 데이터..
					-	이름, 성별, 나이 등의
						수치형 데이터 뿐만 아니라
						애니메이션, 이펙트, 텍스처 등의
						리소스 파일들도 해당..
					-	주로 '명사' 형태를 지님..

				-	기능..
					-	함수로 구성된 일련의
						동작 프로세스들..
					-	동작에 필요한 행동 과정을
						소스로 구현한 것..
					-	주로 '동사' 형태를 지님..

		
	----------------
	-	객체지향
		프로그래밍..
	----------------
		
		----------
		-	정의..
		----------

			-	프로그램을 단순히 데이터와
				처리 방법으로 나누는 것이 아니라,
				'객체(object)'라는 기본 단위로 나누고
				이들의 상호 작용으로 서술하는 방식..

				-	객체..
					-	데이터와 처리방법을 가지며,
						특정 역할을 수행하도록 정의한
						추상적인 개념..



		----------------
		-	객체지향의
			4가지 특징..
		----------------

			1)	추상화..
				참고 : [ 상속 계층도.png ]
				
				-	객체들이 공통적으로
					필요로 하는 속성이나 동작을
					하나로 추출해 내는 작업..

				-	상속 vs 추상화..

					-	상속..
						-	기존의 클래스를 사용하여
							새로운 자식 클래스들을 만드는 것..

					-	추상화..
						-	기존의 유사한 클래스들을 파악하여
							공통의 부모 클래스를 만드는 것..



			2)	상속..

				-	기존에 존재하는 클래스의
					기능이나 속성을 다른 클래스가
					그대로 물려받도록 하는 특징..

				-	부모와 자식이라는
					종속 관계가 형성되며
					파생 방향이 설정됨..

				-	자식 클래스는 부모의 기능에
					자식 고유의 속성과 기능이
					추가되어 더 구체적이고 
					확장된 형태로 발전..


			3)	다형성..

				-	하나의 객체 또는 메서드가
					다양한 형태로 다뤄질수 있는 것..

				-	객체의 다형성..

					-	오버 라이딩..
						-	부모 클래스로부터 물려받은
							함수의 구현 내용을 자식 클래스에서
							덮어쓰기( overriding )로 변경하여
							재정의 하는 것..

				-	메서드의 다형성..

					-	오버 로딩..
						-	같은 이름의 함수라도 매개변수를
							다르게 하여 여러가지 형태로
							제작된( overloading ) 동명의
							함수를 사용하게 하는 것..


			4)	캡슐화..

				-	특정한 목적을 수행하기 위해
					속성과 기능을 하나로 묶어 놓은 것..

				-	주로 속성을 외부에서 함부로 접근 못하도록
					금지하고 특정한 함수를 통해서만
					접근하도록 함..
					-	정보 보호..
						-	외부로부터 속성의 오염 방지..
					-	정보 은닉..
						-	내부의 동작을 감추고
							외부에는 필요한 부분만 노출..


===============================================================

	[ 참고 ]

		객체 지향 프로그래밍
		https://namu.wiki/w/%EA%B0%9D%EC%B2%B4%20%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D
		
		창시자 앨런 케이가 말하는, 객체 지향 프로그래밍의 본질
		https://velog.io/@eddy_song/alan-kay-OOP#%ED%96%89%EB%8F%99%EC%9D%84-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%AC%B6%EC%97%88%EC%9D%84-%EB%95%8C
				
		객체 지향 프로그래밍(OOP)의 개념과 4가지 특징
		https://jja2han.tistory.com/330

		6) 객체지향 프로그래밍7 - 추상화
		https://velog.io/@dev-mage/hello-java-world-oop-abstraction

		[OOP] 객체지향의 특징 - 캡슐화(Encapsulation)와 정보 은닉
		https://blog.itcode.dev/posts/2021/08/08/encapulation#%EC%BA%A1%EC%8A%90%ED%99%94-(Encapsulation)

===============================================================